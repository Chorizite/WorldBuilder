// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldBuilder.Shared.Documents;

#nullable disable

namespace WorldBuilder.Shared.Migrations
{
    [DbContext(typeof(DocumentDbContext))]
    [Migration("20251007071113_AddSnapshotsTable")]
    partial class AddSnapshotsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("WorldBuilder.Shared.Models.DBDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Documents_Id");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_Documents_LastModified");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Documents_Type");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WorldBuilder.Shared.Models.DBDocumentUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Updates_ClientId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_Updates_Timestamp");

                    b.HasIndex("DocumentId", "Timestamp")
                        .HasDatabaseName("IX_Updates_DocumentId_Timestamp");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("WorldBuilder.Shared.Models.DBSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId", "Timestamp")
                        .HasDatabaseName("IX_Snapshots_DocumentId_Timestamp");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("WorldBuilder.Shared.Models.DBDocumentUpdate", b =>
                {
                    b.HasOne("WorldBuilder.Shared.Models.DBDocument", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Updates_Documents");
                });

            modelBuilder.Entity("WorldBuilder.Shared.Models.DBSnapshot", b =>
                {
                    b.HasOne("WorldBuilder.Shared.Models.DBDocument", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Snapshots_Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
